# ==============================================
# TENNIS SCOREBOARD MAKEFILE
# ==============================================
# Makefile –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–µ–ø–ª–æ—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
# Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Tennis Scoreboard

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
# ----------
COMPOSE_FILE = compose.yml
ENV_FILE = .env
APP_NAME = tennis-scoreboard
BACKUP_DIR = ./backups
LOG_DIR = ./logs

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
CYAN = \033[36m
GREEN = \033[32m
YELLOW = \033[33m
RED = \033[31m
NC = \033[0m # No Color

.PHONY: help build up down restart logs status clean backup restore health test

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
help:
	@echo "$(CYAN)=== TENNIS SCOREBOARD DEPLOYMENT ===$(NC)"
	@echo ""
	@echo "$(GREEN)–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:$(NC)"
	@echo "  make build     - –°–æ–±—Ä–∞—Ç—å –≤—Å–µ Docker –æ–±—Ä–∞–∑—ã"
	@echo "  make up        - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
	@echo "  make down      - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
	@echo "  make restart   - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
	@echo "  make deploy    - –ü–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π (build + up)"
	@echo ""
	@echo "$(GREEN)–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:$(NC)"
	@echo "  make status    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
	@echo "  make logs      - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
	@echo "  make logs-app  - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
	@echo "  make logs-db   - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
	@echo "  make logs-nginx- –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ nginx"
	@echo "  make health    - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–æ–≤"
	@echo ""
	@echo "$(GREEN)–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏:$(NC)"
	@echo "  make backup    - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ë–î"
	@echo "  make restore   - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ë–î –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
	@echo "  make clean     - –û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ Docker —Ä–µ—Å—É—Ä—Å—ã"
	@echo "  make clean-all - –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–≤–∫–ª—é—á–∞—è volumes)"
	@echo ""
	@echo "$(GREEN)–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:$(NC)"
	@echo "  make test      - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã"
	@echo "  make lint      - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –ª–∏–Ω—Ç–µ—Ä–æ–º"
	@echo "  make format    - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥"
	@echo "  make shell-app - –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
	@echo "  make shell-db  - –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É –ë–î"

# –°–æ–±—Ä–∞—Ç—å –≤—Å–µ Docker –æ–±—Ä–∞–∑—ã
build:
	@echo "$(CYAN)üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤...$(NC)"
	docker-compose -f $(COMPOSE_FILE) --env-file $(ENV_FILE) build --no-cache
	@echo "$(GREEN)‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

# –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
up:
	@echo "$(CYAN)üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	docker-compose -f $(COMPOSE_FILE) --env-file $(ENV_FILE) up -d
	@sleep 5
	@make status
	@echo "$(GREEN)‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã$(NC)"
	@echo "$(YELLOW)üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost$(NC)"

# –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
down:
	@echo "$(CYAN)üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	docker-compose -f $(COMPOSE_FILE) --env-file $(ENV_FILE) down
	@echo "$(GREEN)‚úÖ –°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

# –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
restart:
	@echo "$(CYAN)üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	@make down
	@sleep 2
	@make up

# –ü–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π
deploy:
	@echo "$(CYAN)üöÄ –ü–û–õ–ù–´–ô –î–ï–ü–õ–û–ô –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø$(NC)"
	@make build
	@make up
	@make health
	@echo "$(GREEN)‚úÖ –î–ï–ü–õ–û–ô –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û$(NC)"

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
status:
	@echo "$(CYAN)üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:$(NC)"
	docker-compose -f $(COMPOSE_FILE) ps

# –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
logs:
	@echo "$(CYAN)üìú –õ–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:$(NC)"
	docker-compose -f $(COMPOSE_FILE) logs --tail=50 -f

# –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
logs-app:
	@echo "$(CYAN)üìú –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:$(NC)"
	docker-compose -f $(COMPOSE_FILE) logs --tail=50 -f app

# –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
logs-db:
	@echo "$(CYAN)üìú –õ–æ–≥–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:$(NC)"
	docker-compose -f $(COMPOSE_FILE) logs --tail=50 -f db

# –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ nginx
logs-nginx:
	@echo "$(CYAN)üìú –õ–æ–≥–∏ nginx:$(NC)"
	docker-compose -f $(COMPOSE_FILE) logs --tail=50 -f nginx

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–æ–≤
health:
	@echo "$(CYAN)üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	@echo "$(YELLOW)–ü—Ä–æ–≤–µ—Ä–∫–∞ nginx (–ø–æ—Ä—Ç 80):$(NC)"
	@curl -s -f http://localhost >/dev/null && echo "$(GREEN)‚úÖ Nginx: OK$(NC)" || echo "$(RED)‚ùå Nginx: FAIL$(NC)"
	@echo "$(YELLOW)–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ø–æ—Ä—Ç 8080):$(NC)"
	@curl -s -f http://localhost:8080 >/dev/null && echo "$(GREEN)‚úÖ App: OK$(NC)" || echo "$(RED)‚ùå App: FAIL$(NC)"
	@echo "$(YELLOW)–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:$(NC)"
	@docker-compose -f $(COMPOSE_FILE) exec -T db pg_isready -U postgres >/dev/null && echo "$(GREEN)‚úÖ Database: OK$(NC)" || echo "$(RED)‚ùå Database: FAIL$(NC)"

# –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ë–î
backup:
	@echo "$(CYAN)üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ë–î...$(NC)"
	@mkdir -p $(BACKUP_DIR)
	@BACKUP_FILE="$(BACKUP_DIR)/tennis_db_backup_$$(date +%Y%m%d_%H%M%S).sql"; \
	docker-compose -f $(COMPOSE_FILE) exec -T db pg_dump -U postgres postgres > $$BACKUP_FILE && \
	echo "$(GREEN)‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $$BACKUP_FILE$(NC)" || \
	echo "$(RED)‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏$(NC)"

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ë–î –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
restore:
	@echo "$(YELLOW)üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏:$(NC)"
	@ls -la $(BACKUP_DIR)/*.sql 2>/dev/null || echo "$(RED)‚ùå –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã$(NC)"
	@echo "$(CYAN)–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:$(NC)"
	@echo "docker-compose exec -T db psql -U postgres postgres < $(BACKUP_DIR)/filename.sql"

# –û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ Docker —Ä–µ—Å—É—Ä—Å—ã
clean:
	@echo "$(CYAN)üßπ –û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤...$(NC)"
	docker system prune -f
	docker image prune -f
	@echo "$(GREEN)‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

# –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤–∫–ª—é—á–∞—è volumes
clean-all:
	@echo "$(RED)‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!$(NC)"
	@echo "$(YELLOW)–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? [y/N]$(NC)"
	@read -p "" confirm && [ "$$confirm" = "y" ] || exit 1
	@make down
	docker-compose -f $(COMPOSE_FILE) down -v --remove-orphans
	docker system prune -af --volumes
	@echo "$(GREEN)‚úÖ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

# –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
test:
	@echo "$(CYAN)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...$(NC)"
	docker-compose -f $(COMPOSE_FILE) exec app python -m pytest tests/ -v
	@echo "$(GREEN)‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã$(NC)"

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –ª–∏–Ω—Ç–µ—Ä–æ–º
lint:
	@echo "$(CYAN)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ª–∏–Ω—Ç–µ—Ä–æ–º...$(NC)"
	docker-compose -f $(COMPOSE_FILE) exec app python -m flake8 src/
	@echo "$(GREEN)‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω—Ç–µ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
format:
	@echo "$(CYAN)‚ú® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞...$(NC)"
	docker-compose -f $(COMPOSE_FILE) exec app python -m black src/
	@echo "$(GREEN)‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ$(NC)"

# –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
shell-app:
	@echo "$(CYAN)üêö –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...$(NC)"
	docker-compose -f $(COMPOSE_FILE) exec app /bin/bash

# –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É –ë–î
shell-db:
	@echo "$(CYAN)üêö –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É –ë–î...$(NC)"
	docker-compose -f $(COMPOSE_FILE) exec db psql -U postgres postgres

# –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤ –∏ –±—ç–∫–∞–ø–æ–≤
init-dirs:
	@mkdir -p $(BACKUP_DIR)
	@mkdir -p $(LOG_DIR)
	@echo "$(GREEN)‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã$(NC)"

# –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
config:
	@echo "$(CYAN)‚öôÔ∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Docker Compose:$(NC)"
	docker-compose -f $(COMPOSE_FILE) --env-file $(ENV_FILE) config

# –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (—Å—Ç–∞—Ç—É—Å + health)
check:
	@make status
	@echo ""
	@make health

# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
.DEFAULT_GOAL := help
