# Docker Compose configuration for Tennis Scoreboard Application
# Production-ready multi-container setup with PostgreSQL, Python app, and Nginx

services:
  # PostgreSQL Database Service
  # Stores players, matches, and application data with persistent storage
  db:
    image: postgres
    restart: unless-stopped
    # Optimized shared memory for PostgreSQL performance
    shm_size: ${POSTGRES_SHARED_MEMORY}
    environment:
      # Database credentials loaded from .env file
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_MAX_CONNECTIONS: ${POSTGRES_MAX_CONNECTIONS}
    ports:
      # External access to database (host:container)
      - "${DB_HOST_PORT}:5432"
    volumes:
      # Persistent data storage for PostgreSQL
      - postgres_data:/var/lib/postgresql/data
      # Initialize database with SQL scripts on first run
      - ./sql:/docker-entrypoint-initdb.d
    env_file:
      - .env
    # Health check for PostgreSQL
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: ${HEALTH_CHECK_INTERVAL}
      timeout: ${HEALTH_CHECK_TIMEOUT}
      retries: ${HEALTH_CHECK_RETRIES}
      start_period: 40s

  # Python Tennis Scoreboard Application
  # Handles tennis match scoring, player management, and game logic
  app:
    build: .
    restart: unless-stopped
    ports:
      # Application HTTP server (host:container)
      - "${APP_PORT}:8080"
    environment:
      # Database connection string for internal container communication
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}"
      # Python logging configuration for immediate output
      PYTHONUNBUFFERED: "${PYTHONUNBUFFERED}"
      # Application environment mode
      LOG_LEVEL: "${LOG_LEVEL}"
    env_file:
      - .env
    depends_on:
      # Ensure database starts before application
      - db
    # Health check for Python application
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: ${HEALTH_CHECK_INTERVAL}
      timeout: ${HEALTH_CHECK_TIMEOUT}
      retries: ${HEALTH_CHECK_RETRIES}
      start_period: 60s

  # Nginx Reverse Proxy and Static File Server
  # Serves static assets and proxies API requests to Python application
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      # HTTP web server (host:container)
      - "${NGINX_PORT}:80"
    volumes:
      # Custom nginx configuration for reverse proxy
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      # Static files (CSS, JS, images) served directly by nginx for performance
      - ./src/tennis_score/public:/usr/share/nginx/html/static:ro
    depends_on:
      # Ensure application starts before nginx
      - app
    # Health check for Nginx
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: ${HEALTH_CHECK_INTERVAL}
      timeout: ${HEALTH_CHECK_TIMEOUT}
      retries: ${HEALTH_CHECK_RETRIES}
      start_period: 30s

# Persistent volumes for data storage
volumes:
  # PostgreSQL data persistence across container restarts and updates
  postgres_data:
