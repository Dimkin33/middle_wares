# Use postgres/example user/password credentials

services:

  db:
    image: postgres
    restart: always
    # set shared memory limit when using docker compose
    shm_size: 128mb
    # or set shared memory limit when deploy via swarm stack
    #volumes:
    #  - type: tmpfs
    #    target: /dev/shm
    #    tmpfs:
    #      size: 134217728 # 128*2^20 bytes = 128Mb
    environment:
      POSTGRES_USER: ${POSTGRES_USER} # Раскомментировано
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} # Раскомментировано
      # POSTGRES_USER: postgres # Закомментировано
      # POSTGRES_PASSWORD: postgres # Закомментировано
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${DB_HOST_PORT}:5432" # Проброс порта 5432 контейнера на порт DB_HOST_PORT хоста
    volumes:
      - postgres_data:/var/lib/postgresql/data # Монтируем в стандартный каталог данных PostgreSQL
    env_file: # Раскомментировано
      - .env # Раскомментировано

  app: # Новый сервис для вашего Python-приложения
    build: . # Указывает Docker Compose собрать образ из Dockerfile в текущей директории
    restart: always
    ports:
      - "8080:8080" # Пробрасывает порт 8080 контейнера на порт 8080 хоста
    environment:
      # DATABASE_URL для подключения из приложения к сервису db
      # Используем имя сервиса 'db' как хост
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}"
      PYTHONUNBUFFERED: "1" # Для немедленного вывода логов Python в Docker
      # APP_PORT: "8080" # Если ваше приложение читает порт из переменной окружения
    env_file:
      - .env # Загружает переменные из .env (например, POSTGRES_USER, POSTGRES_PASSWORD)
    depends_on:
      - db # Гарантирует, что сервис db будет запущен перед сервисом app

  nginx: # Новый сервис для Nginx
    image: nginx:latest # Используем последний образ Nginx
    restart: always
    ports:
      - "80:80" # Пробрасывает порт 80 хоста на порт 80 контейнера Nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro # Монтируем конфигурационный файл Nginx (только для чтения)
    depends_on:
      - app # Гарантирует, что сервис app будет запущен перед Nginx

  # adminer:
  #   image: adminer
  #   restart: always
  #   ports:
  #     - "8081:8080" # Изменил порт хоста для Adminer на 8081

volumes: # Определяем том
  postgres_data: {}
