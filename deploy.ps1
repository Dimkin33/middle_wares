# ==============================================
# TENNIS SCOREBOARD DEPLOYMENT SCRIPT
# ==============================================
# PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–µ–ø–ª–æ—è
# Tennis Scoreboard –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ Windows

param(
    [Parameter(Position=0)]
    [string]$Command = "help"
)

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
$COMPOSE_FILE = "compose.yml"
$ENV_FILE = ".env"
$APP_NAME = "tennis-scoreboard"
$BACKUP_DIR = "./backups"
$LOG_DIR = "./logs"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host $Message -ForegroundColor $Color
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
function Show-Help {
    Write-ColorOutput "=== TENNIS SCOREBOARD DEPLOYMENT ===" "Cyan"
    Write-Host ""
    Write-ColorOutput "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:" "Green"
    Write-Host "  .\deploy.ps1 build     - –°–æ–±—Ä–∞—Ç—å –≤—Å–µ Docker –æ–±—Ä–∞–∑—ã"
    Write-Host "  .\deploy.ps1 up        - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    Write-Host "  .\deploy.ps1 down      - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    Write-Host "  .\deploy.ps1 restart   - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    Write-Host "  .\deploy.ps1 deploy    - –ü–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π (build + up)"
    Write-Host ""
    Write-ColorOutput "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:" "Green"
    Write-Host "  .\deploy.ps1 status    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    Write-Host "  .\deploy.ps1 logs      - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    Write-Host "  .\deploy.ps1 logs-app  - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    Write-Host "  .\deploy.ps1 logs-db   - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    Write-Host "  .\deploy.ps1 logs-nginx- –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ nginx"
    Write-Host "  .\deploy.ps1 health    - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–æ–≤"
    Write-Host ""
    Write-ColorOutput "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏:" "Green"
    Write-Host "  .\deploy.ps1 backup    - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ë–î"
    Write-Host "  .\deploy.ps1 restore   - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ë–î –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
    Write-Host "  .\deploy.ps1 clean     - –û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ Docker —Ä–µ—Å—É—Ä—Å—ã"
    Write-Host "  .\deploy.ps1 clean-all - –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–≤–∫–ª—é—á–∞—è volumes)"
    Write-Host ""
    Write-ColorOutput "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:" "Green"
    Write-Host "  .\deploy.ps1 test      - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã"
    Write-Host "  .\deploy.ps1 shell-app - –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    Write-Host "  .\deploy.ps1 shell-db  - –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É –ë–î"
}

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
switch ($Command) {
    "build" {
        Write-ColorOutput "üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..." "Cyan"
        docker-compose -f $COMPOSE_FILE --env-file $ENV_FILE build --no-cache
        if ($LASTEXITCODE -eq 0) {
            Write-ColorOutput "‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" "Green"
        } else {
            Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏" "Red"
        }
        break
    }
    
    "up" {
        Write-ColorOutput "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..." "Cyan"
        docker-compose -f $COMPOSE_FILE --env-file $ENV_FILE up -d
        Start-Sleep -Seconds 5
        & $MyInvocation.MyCommand.Path status
        Write-ColorOutput "‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã" "Green"
        Write-ColorOutput "üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost" "Yellow"
        break
    }
    
    "down" {
        Write-ColorOutput "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..." "Cyan"
        docker-compose -f $COMPOSE_FILE --env-file $ENV_FILE down
        Write-ColorOutput "‚úÖ –°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã" "Green"
        break
    }
    
    "restart" {
        Write-ColorOutput "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..." "Cyan"
        & $MyInvocation.MyCommand.Path down
        Start-Sleep -Seconds 2
        & $MyInvocation.MyCommand.Path up
        break
    }
    
    "deploy" {
        Write-ColorOutput "üöÄ –ü–û–õ–ù–´–ô –î–ï–ü–õ–û–ô –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø" "Cyan"
        & $MyInvocation.MyCommand.Path build
        & $MyInvocation.MyCommand.Path up
        & $MyInvocation.MyCommand.Path health
        Write-ColorOutput "‚úÖ –î–ï–ü–õ–û–ô –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û" "Green"
        break
    }
    
    "status" {
        Write-ColorOutput "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:" "Cyan"
        docker-compose -f $COMPOSE_FILE ps
        break
    }
    
    "logs" {
        Write-ColorOutput "üìú –õ–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:" "Cyan"
        docker-compose -f $COMPOSE_FILE logs --tail=50 -f
        break
    }
    
    "logs-app" {
        Write-ColorOutput "üìú –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:" "Cyan"
        docker-compose -f $COMPOSE_FILE logs --tail=50 -f app
        break
    }
    
    "logs-db" {
        Write-ColorOutput "üìú –õ–æ–≥–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:" "Cyan"
        docker-compose -f $COMPOSE_FILE logs --tail=50 -f db
        break
    }
    
    "logs-nginx" {
        Write-ColorOutput "üìú –õ–æ–≥–∏ nginx:" "Cyan"
        docker-compose -f $COMPOSE_FILE logs --tail=50 -f nginx
        break
    }
    
    "health" {
        Write-ColorOutput "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤..." "Cyan"
        
        Write-ColorOutput "–ü—Ä–æ–≤–µ—Ä–∫–∞ nginx (–ø–æ—Ä—Ç 80):" "Yellow"
        try {
            $response = Invoke-WebRequest -Uri "http://localhost" -UseBasicParsing -TimeoutSec 5
            if ($response.StatusCode -eq 200) {
                Write-ColorOutput "‚úÖ Nginx: OK" "Green"
            } else {
                Write-ColorOutput "‚ùå Nginx: FAIL" "Red"
            }
        } catch {
            Write-ColorOutput "‚ùå Nginx: FAIL" "Red"
        }
        
        Write-ColorOutput "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ø–æ—Ä—Ç 8080):" "Yellow"
        try {
            $response = Invoke-WebRequest -Uri "http://localhost:8080" -UseBasicParsing -TimeoutSec 5
            if ($response.StatusCode -eq 200) {
                Write-ColorOutput "‚úÖ App: OK" "Green"
            } else {
                Write-ColorOutput "‚ùå App: FAIL" "Red"
            }
        } catch {
            Write-ColorOutput "‚ùå App: FAIL" "Red"
        }
        
        Write-ColorOutput "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:" "Yellow"
        $dbStatus = docker-compose -f $COMPOSE_FILE exec -T db pg_isready -U postgres 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-ColorOutput "‚úÖ Database: OK" "Green"
        } else {
            Write-ColorOutput "‚ùå Database: FAIL" "Red"
        }
        break
    }
    
    "backup" {
        Write-ColorOutput "üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ë–î..." "Cyan"
        if (!(Test-Path $BACKUP_DIR)) {
            New-Item -ItemType Directory -Path $BACKUP_DIR | Out-Null
        }
        $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
        $backupFile = "$BACKUP_DIR/tennis_db_backup_$timestamp.sql"
        docker-compose -f $COMPOSE_FILE exec -T db pg_dump -U postgres postgres > $backupFile
        if ($LASTEXITCODE -eq 0) {
            Write-ColorOutput "‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $backupFile" "Green"
        } else {
            Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏" "Red"
        }
        break
    }
    
    "restore" {
        Write-ColorOutput "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏:" "Yellow"
        if (Test-Path "$BACKUP_DIR/*.sql") {
            Get-ChildItem "$BACKUP_DIR/*.sql" | Format-Table Name, LastWriteTime
            Write-ColorOutput "–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:" "Cyan"
            Write-Host "Get-Content '$BACKUP_DIR/filename.sql' | docker-compose exec -T db psql -U postgres postgres"
        } else {
            Write-ColorOutput "‚ùå –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" "Red"
        }
        break
    }
    
    "clean" {
        Write-ColorOutput "üßπ –û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤..." "Cyan"
        docker system prune -f
        docker image prune -f
        Write-ColorOutput "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" "Green"
        break
    }
    
    "clean-all" {
        Write-ColorOutput "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!" "Red"
        $confirm = Read-Host "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? [y/N]"
        if ($confirm -eq "y" -or $confirm -eq "Y") {
            & $MyInvocation.MyCommand.Path down
            docker-compose -f $COMPOSE_FILE down -v --remove-orphans
            docker system prune -af --volumes
            Write-ColorOutput "‚úÖ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" "Green"
        } else {
            Write-ColorOutput "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞" "Yellow"
        }
        break
    }
    
    "test" {
        Write-ColorOutput "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..." "Cyan"
        docker-compose -f $COMPOSE_FILE exec app python -m pytest tests/ -v
        Write-ColorOutput "‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã" "Green"
        break
    }
    
    "shell-app" {
        Write-ColorOutput "üêö –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..." "Cyan"
        docker-compose -f $COMPOSE_FILE exec app /bin/bash
        break
    }
    
    "shell-db" {
        Write-ColorOutput "üêö –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É –ë–î..." "Cyan"
        docker-compose -f $COMPOSE_FILE exec db psql -U postgres postgres
        break
    }
    
    "config" {
        Write-ColorOutput "‚öôÔ∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Docker Compose:" "Cyan"
        docker-compose -f $COMPOSE_FILE --env-file $ENV_FILE config
        break
    }
    
    "check" {
        & $MyInvocation.MyCommand.Path status
        Write-Host ""
        & $MyInvocation.MyCommand.Path health
        break
    }
    
    default {
        Show-Help
        break
    }
}
