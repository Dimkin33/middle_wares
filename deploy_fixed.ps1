# ==============================================
# TENNIS SCOREBOARD DEPLOYMENT SCRIPT (FIXED)
# ==============================================
# PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–µ–ø–ª–æ—è
# Tennis Scoreboard –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ Windows

param(
    [Parameter(Position=0)]
    [string]$Command = "help"
)

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
$COMPOSE_FILE = "compose.yml"
$ENV_FILE = ".env"
$APP_NAME = "tennis-scoreboard"
$BACKUP_DIR = "./backups"
$LOG_DIR = "./logs"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host $Message -ForegroundColor $Color
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
function Show-Help {
    Write-ColorOutput "=== TENNIS SCOREBOARD DEPLOYMENT ===" "Cyan"
    Write-Host ""
    Write-ColorOutput "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:" "Green"
    Write-Host "  .\deploy.ps1 build     - –°–æ–±—Ä–∞—Ç—å –≤—Å–µ Docker –æ–±—Ä–∞–∑—ã"
    Write-Host "  .\deploy.ps1 up        - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    Write-Host "  .\deploy.ps1 down      - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    Write-Host "  .\deploy.ps1 restart   - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    Write-Host "  .\deploy.ps1 deploy    - –ü–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π (build + up)"
    Write-Host ""
    Write-ColorOutput "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:" "Green"
    Write-Host "  .\deploy.ps1 status    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    Write-Host "  .\deploy.ps1 logs      - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    Write-Host "  .\deploy.ps1 logs-app  - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    Write-Host "  .\deploy.ps1 logs-db   - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    Write-Host "  .\deploy.ps1 logs-nginx- –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ nginx"
    Write-Host "  .\deploy.ps1 health    - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–æ–≤"
    Write-Host ""
    Write-ColorOutput "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ:" "Green"
    Write-Host "  .\deploy.ps1 backup    - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ë–î"
    Write-Host "  .\deploy.ps1 restore   - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
    Write-Host "  .\deploy.ps1 clean     - –û—á–∏—Å—Ç–∏—Ç—å Docker —Ä–µ—Å—É—Ä—Å—ã"
    Write-Host "  .\deploy.ps1 shell     - –û—Ç–∫—Ä—ã—Ç—å shell –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ app"
    Write-Host "  .\deploy.ps1 test      - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã"
    Write-Host ""
}

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
function Build-Images {
    Write-ColorOutput "üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..." "Yellow"
    docker-compose -f $COMPOSE_FILE build
    if ($LASTEXITCODE -eq 0) {
        Write-ColorOutput "‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!" "Green"
    } else {
        Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ!" "Red"
        exit 1
    }
}

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
function Start-Services {
    Write-ColorOutput "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..." "Yellow"
    docker-compose -f $COMPOSE_FILE up -d
    if ($LASTEXITCODE -eq 0) {
        Write-ColorOutput "‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!" "Green"
        Show-Status
    } else {
        Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ!" "Red"
        exit 1
    }
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
function Stop-Services {
    Write-ColorOutput "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..." "Yellow"
    docker-compose -f $COMPOSE_FILE down
    if ($LASTEXITCODE -eq 0) {
        Write-ColorOutput "‚úÖ –°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!" "Green"
    } else {
        Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ!" "Red"
        exit 1
    }
}

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
function Restart-Services {
    Write-ColorOutput "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..." "Yellow"
    Stop-Services
    Start-Services
}

# –ü–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π
function Deploy-Full {
    Write-ColorOutput "üöÄ –ü–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..." "Cyan"
    Build-Images
    Start-Services
    Start-Sleep -Seconds 5
    Test-Health
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
function Show-Status {
    Write-ColorOutput "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:" "Cyan"
    docker-compose -f $COMPOSE_FILE ps
}

# –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏
function Show-Logs {
    param([string]$Service = "")
    
    if ($Service -eq "") {
        Write-ColorOutput "üìú –õ–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:" "Cyan"
        docker-compose -f $COMPOSE_FILE logs --tail=50
    } else {
        Write-ColorOutput "üìú –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞ $Service:" "Cyan"
        docker-compose -f $COMPOSE_FILE logs --tail=50 $Service
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
function Test-Health {
    Write-ColorOutput "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤..." "Cyan"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ nginx
    Write-Host "–ü—Ä–æ–≤–µ—Ä–∫–∞ nginx (–ø–æ—Ä—Ç 80):"
    try {
        $response = Invoke-WebRequest -Uri "http://localhost" -UseBasicParsing -TimeoutSec 5
        if ($response.StatusCode -eq 200) {
            Write-ColorOutput "‚úÖ Nginx: OK" "Green"
        } else {
            Write-ColorOutput "‚ùå Nginx: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω" "Red"
        }
    } catch {
        Write-ColorOutput "‚ùå Nginx: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è" "Red"
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    Write-Host "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ø–æ—Ä—Ç 8080):"
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:8080" -UseBasicParsing -TimeoutSec 5
        if ($response.StatusCode -eq 200) {
            Write-ColorOutput "‚úÖ App: OK" "Green"
        } else {
            Write-ColorOutput "‚ùå App: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ" "Red"
        }
    } catch {
        Write-ColorOutput "‚ùå App: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è" "Red"
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    Write-Host "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:"
    $dbContainer = docker-compose -f $COMPOSE_FILE ps -q db
    if ($dbContainer) {
        $dbStatus = docker inspect --format='{{.State.Health.Status}}' $dbContainer 2>$null
        if ($dbStatus -eq "healthy" -or $LASTEXITCODE -eq 0) {
            Write-ColorOutput "‚úÖ Database: OK" "Green"
        } else {
            Write-ColorOutput "‚ùå Database: –ü—Ä–æ–±–ª–µ–º—ã" "Red"
        }
    } else {
        Write-ColorOutput "‚ùå Database: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" "Red"
    }
}

# –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
function Backup-Database {
    Write-ColorOutput "üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..." "Yellow"
    
    if (!(Test-Path $BACKUP_DIR)) {
        New-Item -ItemType Directory -Path $BACKUP_DIR -Force | Out-Null
    }
    
    $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
    $backupFile = "$BACKUP_DIR/tennis_db_backup_$timestamp.sql"
    
    docker-compose -f $COMPOSE_FILE exec -T db pg_dump -U postgres postgres > $backupFile
    
    if ($LASTEXITCODE -eq 0) {
        Write-ColorOutput "‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $backupFile" "Green"
    } else {
        Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏!" "Red"
        exit 1
    }
}

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
function Restore-Database {
    Write-ColorOutput "üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏..." "Yellow"
    
    $backupFiles = Get-ChildItem -Path $BACKUP_DIR -Filter "*.sql" | Sort-Object LastWriteTime -Descending
    
    if ($backupFiles.Count -eq 0) {
        Write-ColorOutput "‚ùå –§–∞–π–ª—ã —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ $BACKUP_DIR" "Red"
        return
    }
    
    $latestBackup = $backupFiles[0].FullName
    Write-Host "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑: $latestBackup"
    
    docker-compose -f $COMPOSE_FILE exec -T db psql -U postgres -d postgres -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;"
    Get-Content $latestBackup | docker-compose -f $COMPOSE_FILE exec -T db psql -U postgres postgres
    
    if ($LASTEXITCODE -eq 0) {
        Write-ColorOutput "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!" "Green"
    } else {
        Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è!" "Red"
        exit 1
    }
}

# –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
function Clean-Resources {
    Write-ColorOutput "üßπ –û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤..." "Yellow"
    
    docker-compose -f $COMPOSE_FILE down --volumes --remove-orphans
    docker system prune -f
    docker volume prune -f
    
    Write-ColorOutput "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" "Green"
}

# –û—Ç–∫—Ä—ã—Ç—å shell –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
function Open-Shell {
    Write-ColorOutput "üêö –û—Ç–∫—Ä—ã—Ç–∏–µ shell –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..." "Cyan"
    docker-compose -f $COMPOSE_FILE exec app /bin/bash
}

# –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
function Run-Tests {
    Write-ColorOutput "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..." "Yellow"
    docker-compose -f $COMPOSE_FILE exec app python -m pytest -v
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
switch ($Command.ToLower()) {
    "help" { Show-Help }
    "build" { Build-Images }
    "up" { Start-Services }
    "down" { Stop-Services }
    "restart" { Restart-Services }
    "deploy" { Deploy-Full }
    "status" { Show-Status }
    "logs" { Show-Logs }
    "logs-app" { Show-Logs "app" }
    "logs-db" { Show-Logs "db" }
    "logs-nginx" { Show-Logs "nginx" }
    "health" { Test-Health }
    "backup" { Backup-Database }
    "restore" { Restore-Database }
    "clean" { Clean-Resources }
    "shell" { Open-Shell }
    "test" { Run-Tests }
    default {
        Write-ColorOutput "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $Command" "Red"
        Write-Host ""
        Show-Help
        exit 1
    }
}
