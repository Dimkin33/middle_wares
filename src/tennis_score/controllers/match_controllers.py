"""Controllers for tennis match operations such as creating a new match and updating match scores."""  # noqa: E501

import logging

from ..core.response import make_response
from ..services.match_service import MatchService

# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ –≤—Å–µ—Ö –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞—Ö
match_service = MatchService()


def new_match_controller(params: dict) -> dict:
    """–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–∞—Ç—á–∞."""
    logger = logging.getLogger("controller")
    logger.debug(f"new_match_controller: {params}")

    player_one = params.get("playerOne", [""])[0].strip()
    player_two = params.get("playerTwo", [""])[0].strip()

    if not player_one or not player_two:
        return make_response("new-match.html", {"error": "Both player names are required"})

    logger.info(f"New match: {player_one} vs {player_two}")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç—á–∞
    match_dto = match_service.create_match(player_one, player_two)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    view_data = match_service.prepare_match_view_data(match_dto)
    # –Ø–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º match_uuid –≤ view_data –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —à–∞–±–ª–æ–Ω–µ
    if match_dto:
        view_data["match_uuid"] = match_dto.uuid

    return make_response("match-score.html", view_data)


def match_score_controller(params: dict) -> dict:
    """–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–∞ –º–∞—Ç—á–∞ –ø–æ UUID."""
    logger = logging.getLogger("controller")
    logger.debug(f"match_score_controller: {params}")

    match_uuid = params.get("match_uuid", [""])[0].strip()
    player_param = params.get("player", [""])[0].strip()

    if not match_uuid:
        logger.warning("match_uuid not provided to match_score_controller")
        return make_response(
            "new-match.html", {"error": "No match specified. Please start a new match."}
        )

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    completed_match = match_service.get_completed_match_by_uuid(match_uuid)
    if completed_match:
        logger.info(f"Found completed match {match_uuid} in database")
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –º–∞—Ç—á–∞
        if player_param in ["player1", "player2"]:
            logger.warning(f"Attempt to update completed match {match_uuid}")
            view_data = match_service.prepare_completed_match_view_data(completed_match)
            view_data["error"] = "–≠—Ç–æ—Ç –º–∞—Ç—á —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ."
            view_data["match_completed"] = True
            return make_response("match-score.html", view_data)
        
        # –ü—Ä–æ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –º–∞—Ç—á
        view_data = match_service.prepare_completed_match_view_data(completed_match)
        view_data["match_completed"] = True
        return make_response("match-score.html", view_data)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π
    match_dto = None
    if player_param in ["player1", "player2"]:
        logger.debug(f"Updating score for match {match_uuid}, player {player_param}")
        match_dto = match_service.update_match_score(match_uuid, player_param)
    else:
        logger.debug(f"Fetching score data for match {match_uuid}")
        match_dto = match_service.get_match_data_by_uuid(match_uuid)

    if not match_dto:
        logger.error(f"Match {match_uuid} not found in active matches or database")
        return make_response(
            "error.html",
            {
                "error_title": "–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω",
                "error_message": f"–ú–∞—Ç—á —Å ID {match_uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
                "error_details": "–í–æ–∑–º–æ–∂–Ω–æ, –º–∞—Ç—á –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Ç—á.",
                "show_new_match_button": True
            },
            status="404 Not Found"
        )

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ç—á–∞
    view_data = match_service.prepare_match_view_data(match_dto)
    view_data["match_uuid"] = match_dto.uuid
    view_data["match_completed"] = False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ –º–∞—Ç—á –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if match_dto.winner:
        view_data["match_completed"] = True
        view_data["info"] = (
            f"üéâ –ú–∞—Ç—á –∑–∞–≤–µ—Ä—à—ë–Ω! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {match_dto.winner}. "
            "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Ç—á."
        )

    return make_response("match-score.html", view_data)

def reset_match_controller(params: dict) -> dict:
    """–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç–∞ –º–∞—Ç—á–∞ –ø–æ UUID.

    Args:
        params: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞, –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'match_uuid'

    Returns:
        dict: –æ—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ match-score.html –∏–ª–∏ error.html
    """
    logger = logging.getLogger("controller.reset")
    logger.debug(f"Processing reset_match request with params: {params}")

    match_uuid = params.get("match_uuid", [""])[0].strip()
    
    if not match_uuid:
        logger.warning("match_uuid not provided to reset_match_controller")
        return make_response(
            "new-match.html", 
            {"error": "Match UUID is required to reset. Please start a new match."}
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –º–∞—Ç—á
    completed_match = match_service.get_completed_match_by_uuid(match_uuid)
    if completed_match:
        logger.warning(f"Attempt to reset completed match {match_uuid}")
        return make_response(
            "error.html",
            {
                "error_title": "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å –º–∞—Ç—á",
                "error_message": "–≠—Ç–æ—Ç –º–∞—Ç—á —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–±—Ä–æ—à–µ–Ω.",
                "error_details": f"–ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–∏–ª—Å—è. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {completed_match.get('winner', 'N/A')}.",
                "show_new_match_button": True
            },
            status="400 Bad Request"
        )

    # –ü—ã—Ç–∞–µ–º—Å—è —Å–±—Ä–æ—Å–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ç—á
    try:
        match_service.reset_match_score(match_uuid)
        logger.info(f"Match {match_uuid} has been reset")
    except Exception as e:
        logger.error(f"Failed to reset match {match_uuid}: {e}")
        return make_response(
            "error.html",
            {
                "error_title": "–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –º–∞—Ç—á–∞",
                "error_message": f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –º–∞—Ç—á {match_uuid}.",
                "error_details": "–í–æ–∑–º–æ–∂–Ω–æ, –º–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.",
                "show_new_match_button": True
            },
            status="500 Internal Server Error"
        )

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞
    match_dto = match_service.get_match_data_by_uuid(match_uuid)

    if not match_dto:
        logger.error(f"Failed to get match_dto for UUID {match_uuid} after reset.")
        return make_response(
            "error.html",
            {
                "error_title": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
                "error_message": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞ {match_uuid} –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞.",
                "error_details": "–ú–∞—Ç—á –±—ã–ª —Å–±—Ä–æ—à–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö.",
                "show_new_match_button": True
            },
            status="500 Internal Server Error"
        )

    view_data = match_service.prepare_match_view_data(match_dto)
    view_data["match_uuid"] = match_uuid
    view_data["match_completed"] = False
    view_data["info"] = "‚úÖ –°—á–µ—Ç –º–∞—Ç—á–∞ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω. –ò–≥—Ä–∞ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å—Å—è!"

    return make_response("match-score.html", view_data)
